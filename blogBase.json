{"singlePage": [], "startSite": "08/17/2024", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "dark", "nightTheme": "dark-blue", "urlMode": "pinyin", "script": "<script src='https://code.buxiantang.top/assets/articletoc.js'></script>", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {"\u7f51\u7ad9": "M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM5.78 8.75a9.64 9.64 0 0 0 1.363 4.177c.255.426.542.832.857 1.215.245-.296.551-.705.857-1.215A9.64 9.64 0 0 0 10.22 8.75Zm4.44-1.5a9.64 9.64 0 0 0-1.363-4.177c-.307-.51-.612-.919-.857-1.215a9.927 9.927 0 0 0-.857 1.215A9.64 9.64 0 0 0 5.78 7.25Zm-5.944 1.5H1.543a6.507 6.507 0 0 0 4.666 5.5c-.123-.181-.24-.365-.352-.552-.715-1.192-1.437-2.874-1.581-4.948Zm-2.733-1.5h2.733c.144-2.074.866-3.756 1.58-4.948.12-.197.237-.381.353-.552a6.507 6.507 0 0 0-4.666 5.5Zm10.181 1.5c-.144 2.074-.866 3.756-1.58 4.948-.12.197-.237.381-.353.552a6.507 6.507 0 0 0 4.666-5.5Zm2.733-1.5a6.507 6.507 0 0 0-4.666-5.5c.123.181.24.365.353.552.714 1.192 1.436 2.874 1.58 4.948Z"}, "UTC": 8, "rssSplit": "sentence", "exlink": {"\u7f51\u7ad9": "https://link3.cc/nobody_cares"}, "needComment": 1, "allHead": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekVercount.js'></script>", "title": "Nobody_Cares", "subTitle": "\u4e2a\u4eba\u535a\u5ba2", "avatarUrl": "https://avatars.githubusercontent.com/u/110390930?u=e650bc80688d9b64f5c5dd69d6cf9e822186493e&v=4", "GMEEK_VERSION": "last", "postListJson": {"P3": {"htmlDir": "docs/post/ge-ren-bo-ke-bu-shu.html", "labels": ["Gmeek"], "postTitle": "\u4e2a\u4eba\u535a\u5ba2\u90e8\u7f72", "postUrl": "post/ge-ren-bo-ke-bu-shu.html", "postSourceUrl": "https://github.com/H-TXSL/Nobody_Cares.github.io/issues/3", "commentNum": 1, "wordCount": 2833, "description": "# \u4e2a\u4eba\u535a\u5ba2\u5feb\u901f\u642d\u5efa\r\n\r\n- \u6b64\u535a\u5ba2\u76f4\u63a5\u90e8\u7f72\u4e0egithub\u4e0a,\u76f4\u63a5\u901a\u8fc7\u4ee5\u4e0b\u9879\u76ee\u6a21\u677f\u521b\u5efa.\r\n  [Meekdai/Gmeek: Gmeek is a Blog All in Github](https://github.com/Meekdai/Gmeek)\r\n\r\n# \u914d\u7f6e\u6587\u4ef6\r\n\r\n- \u914d\u7f6e`config.json`\u6587\u4ef6\r\n  \r\n  ```c++\r\n  {\r\n  'title':'Meekdai',  // \u535a\u5ba2\u540d\r\n  'subTitle':'\u7ae5\u8bdd\u662f\u4e00\u79cd\u751f\u6d3b\u6001\u5ea6\uff0c\u4ec5\u6b64\u800c\u5df2\u3002", "top": 0, "createdAt": 1723900963, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-note {border-left-color:var(--borderColor-accent-emphasis, var(--color-accent-emphasis));background-color:var(--color-accent-subtle);}.markdown-alert.markdown-alert-note .markdown-alert-title {color: var(--fgColor-accent,var(--color-accent-fg));}</style><style>.markdown-alert.markdown-alert-tip {border-left-color:var(--borderColor-success-emphasis, var(--color-success-emphasis));background-color:var(--color-success-subtle);}.markdown-alert.markdown-alert-tip .markdown-alert-title {color: var(--fgColor-success,var(--color-success-fg));}</style><style>.markdown-alert.markdown-alert-important {border-left-color:var(--borderColor-done-emphasis, var(--color-done-emphasis));background-color:var(--color-done-subtle);}.markdown-alert.markdown-alert-important .markdown-alert-title {color: var(--fgColor-done,var(--color-done-fg));}</style><style>.markdown-alert.markdown-alert-warning {border-left-color:var(--borderColor-attention-emphasis, var(--color-attention-emphasis));background-color:var(--color-attention-subtle);}.markdown-alert.markdown-alert-warning .markdown-alert-title {color: var(--fgColor-attention,var(--color-attention-fg));}</style><style>.markdown-alert.markdown-alert-caution {border-left-color:var(--borderColor-danger-emphasis, var(--color-danger-emphasis));background-color:var(--color-danger-subtle);}.markdown-alert.markdown-alert-caution .markdown-alert-title {color: var(--fgColor-danger,var(--color-danger-fg));}</style>", "script": "<script src='https://code.buxiantang.top/assets/articletoc.js'></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/110390930?u=e650bc80688d9b64f5c5dd69d6cf9e822186493e&v=4", "createdDate": "2024-08-17", "dateLabelColor": "#bc4c00"}, "P4": {"htmlDir": "docs/post/shu-ju-jie-gou.html", "labels": ["Data_Structure"], "postTitle": "\u6570\u636e\u7ed3\u6784", "postUrl": "post/shu-ju-jie-gou.html", "postSourceUrl": "https://github.com/H-TXSL/Nobody_Cares.github.io/issues/4", "commentNum": 0, "wordCount": 18470, "description": "# \u6570\u636e\u7ed3\u6784\r\n## \u4e8c\u53c9\u6811\r\n### \u4e8c\u53c9\u6811\u672f\u8bed :\r\n- \u6839\u8282\u70b9(root node) : \u6ca1\u6709\u7236\u8282\u70b9\u7684\u8282\u70b9\r\n- \u53f6\u8282\u70b9(leaf node) : \u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\r\n- \u8fb9(edge) : \u8fde\u63a5\u4e00\u4e2a\u8282\u70b9\u548c\u53e6\u4e00\u4e2a\u8282\u70b9\u7684\u7ebf\r\n- \u8282\u70b9\u6240\u5728\u5c42(level) : \u6839\u8282\u70b9\u6240\u5728\u5c42\u4e3a1, \u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6240\u5728\u5c42\u4e3a2, \u4ee5\u6b64\u7c7b\u63a8\r\n- \u8282\u70b9\u7684\u5ea6(degree) : \u5b50\u8282\u70b9\u7684\u6570\u91cf\r\n- \u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6(height) : \u4ece\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u8282\u70b9\u4e4b\u95f4\u8fb9\u7684\u6570\u91cf\r\n- \u8282\u70b9\u6df1\u5ea6(depth) : \u4ece\u6839\u8282\u70b9\u5230\u8be5\u8282\u70b9\u4e4b\u95f4\u8fb9\u7684\u6570\u91cf\r\n- \u8282\u70b9\u9ad8\u5ea6(height) : \u4ece\u8be5\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u8282\u70b9\u4e4b\u95f4\u8fb9\u7684\u6570\u91cf   \r\n\r\n### \u4e8c\u53c9\u6811\u7684\u7c7b\u578b:\r\n- \u6ee1\u4e8c\u53c9\u6811(full binary tree) \u4e5f\u79f0 \u5b8c\u7f8e\u4e8c\u53c9\u6811(perfect binary tree) : \u6240\u6709\u8282\u70b9\u8981\u4e48\u6ca1\u6709\u5b50\u8282\u70b9, \u8981\u4e48\u6709\u4e24\u4e2a\u5b50\u8282\u70b9 \r\n\r\n| | \u5b8c\u7f8e\u4e8c\u53c9\u6811 |\r\n| :--: | :--: |\r\n| \u7b2ci\u5c42\u8282\u70b9\u6570 | 2^(i - 1) |\r\n| \u9ad8\u5ea6\u4e3ah\u7684\u6811\u7684\u53f6\u8282\u70b9\u6570 | 2^h | \r\n| \u9ad8\u5ea6\u4e3ah\u7684\u6811\u7684\u8282\u70b9\u603b\u6570 | 2^(h + 1) - 1 |\r\n| \u8282\u70b9\u603b\u6570\u4e3an\u7684\u6811\u7684\u9ad8\u5ea6 | log2(n + 1) - 1 |\r\n- \u5b8c\u5168\u4e8c\u53c9\u6811(complete binary tree) : \u53ea\u6709\u6700\u5e95\u5c42\u8282\u70b9\u4e3a\u88ab\u586b\u6ee1,\u4e14\u6700\u5e95\u5c42\u8282\u70b9\u5c3d\u91cf\u9760\u5de6\u586b\u5145\r\n- \u5b8c\u6ee1\u4e8c\u53c9\u6811(full binary tree) : \u9664\u53f6\u8282\u70b9\u5916, \u6240\u6709\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\r\n- \u5e73\u8861\u4e8c\u53c9\u6811(balanced binary tree) : \u6240\u6709\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u4e0d\u5927\u4e8e1\r\n- \u4e8c\u53c9\u641c\u7d22\u6811(binary search tree) : \u6240\u6709\u8282\u70b9\u7684\u5de6\u5b50\u6811\u5c0f\u4e8e\u6839\u8282\u70b9, \u53f3\u5b50\u6811\u5927\u4e8e\u6839\u8282\u70b9. \u5de6\u53f3\u5b50\u6811\u4e5f\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\r\n### \u4e8c\u53c9\u6811\u904d\u5386\r\n- \u5c42\u5e8f\u904d\u5386(level order traversal) : \u4ece\u6839\u8282\u70b9\u5f00\u59cb, \u4ece\u4e0a\u5230\u4e0b, \u4ece\u5de6\u5230\u53f3\u904d\u5386\u6240\u6709\u8282\u70b9 -> \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\r\n```c++\r\n// \u5c42\u5e8f\u904d\u5386\r\nvoid level_order(Tree* root) {\r\n    // \u521b\u5efa\u4e00\u4e2a\u961f\u5217\uff0c\u7528\u4e8e\u5b58\u50a8\u5f85\u8bbf\u95ee\u7684\u8282\u70b9\r\n    std::queue<Tree *> queue;\r\n    // \u5c06\u6839\u8282\u70b9\u5165\u961f\r\n    queue.push(root);\r\n    // \u521b\u5efa\u4e00\u4e2a\u5411\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u904d\u5386\u8fc7\u7a0b\u4e2d\u7684\u8282\u70b9\u503c\r\n    std::vector<int> vec;\r\n    // \u904d\u5386\u961f\u5217\u4e2d\u7684\u8282\u70b9\r\n    while (!queue.empty()) \r\n    {\r\n        // \u53d6\u51fa\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\r\n        Tree* node = queue.front();\r\n        // \u5c06\u8282\u70b9\u4ece\u961f\u5217\u4e2d\u79fb\u9664\r\n        queue.pop();\r\n        // \u5c06\u8282\u70b9\u7684\u503c\u6dfb\u52a0\u5230\u5411\u91cf\u4e2d\r\n        vec.push_back(node->val);\r\n        // \u5982\u679c\u8282\u70b9\u6709\u5de6\u5b50\u6811\uff0c\u5219\u5c06\u5de6\u5b50\u6811\u5165\u961f\r\n        if (node->left!= nullptr) {\r\n            queue.push(node->left);\r\n        }\r\n        // \u5982\u679c\u8282\u70b9\u6709\u53f3\u5b50\u6811\uff0c\u5219\u5c06\u53f3\u5b50\u6811\u5165\u961f\r\n        if (node->right!= nullptr) {\r\n            queue.push(node->right);\r\n        }\r\n    }\r\n    // \u6253\u5370\u5143\u7d20\r\n    for (int i : vec)\r\n    {\r\n        std::cout << i << ' ';\r\n    }\r\n    std::cout << std::endl;\r\n}\r\n// \u5c42\u5e8f\u63d2\u5165\r\nvoid level_insert(Tree** root, int n) {\r\n    // \u5982\u679c\u6839\u8282\u70b9\u4e3a\u7a7a\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u6839\u8282\u70b9\r\n    if (*root == nullptr) {\r\n        int x = rand() % 100 + 1;\r\n        *root = new Tree(x);\r\n    }\r\n    std::queue<Tree*> queue;\r\n    queue.push(*root);\r\n    int count = std::pow(2, n + 1) - 1; // \u4fee\u6b63\u5c42\u6570\u8ba1\u7b97\r\n    int ans = count - 1;\r\n\r\n    // \u5f53\u961f\u5217\u4e0d\u4e3a\u7a7a\u4e14\u8fd8\u9700\u8981\u63d2\u5165\u8282\u70b9\u65f6\uff0c\u7ee7\u7eed\u5faa\u73af\r\n    while (!queue.empty() && ans > 0) {\r\n        Tree* node = queue.front();\r\n        queue.pop();\r\n\r\n        // \u5982\u679c\u9700\u8981\uff0c\u63d2\u5165\u5de6\u5b50\u8282\u70b9\r\n        if (node->left == nullptr && ans > 0) {\r\n            int x = rand() % 100 + 1;\r\n            node->left = new Tree(x);\r\n            queue.push(node->left);\r\n            ans--;\r\n        }\r\n\r\n        // \u5982\u679c\u9700\u8981\uff0c\u63d2\u5165\u53f3\u5b50\u8282\u70b9\r\n        if (node->right == nullptr && ans > 0) {\r\n            int x = rand() % 100 + 1;\r\n            node->right = new Tree(x);\r\n            queue.push(node->right);\r\n            ans--;\r\n        }\r\n    }\r\n}\r\n```\r\n- \u524d\u4e2d\u540e\u5e8f\u904d\u5386 -> \u65f6\u95f4\u590d\u6742\u5ea6: O(n)\r\n```c++\r\nstatic std::vector<int> vec;\r\n// \u524d\u5e8f\u904d\u5386\u51fd\u6570\uff0c\u7528\u4e8e\u904d\u5386\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u8def\u5f84\r\nvoid pre_order(Tree* root) {\r\n    if (root == nullptr) {\r\n        return;\r\n    }\r\n    vec.push_back(root->val);\r\n    pre_order(root->left);\r\n    pre_order(root->right);\r\n}\r\n\r\n// \u4e2d\u5e8f\u904d\u5386\u51fd\u6570\uff0c\u7528\u4e8e\u904d\u5386\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u8def\u5f84\r\nvoid in_order(Tree* root) {\r\n    if (root == nullptr) {\r\n        return;\r\n    }\r\n    in_order(root->left);\r\n    vec.push_back(root->val);\r\n    in_order(root->right);\r\n}\r\n\r\n// \u540e\u5e8f\u904d\u5386\u51fd\u6570\uff0c\u7528\u4e8e\u904d\u5386\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\u8def\u5f84\r\nvoid post_order(Tree* root) {\r\n    if (root == nullptr) {\r\n        return;\r\n    }\r\n    post_order(root->left);\r\n    post_order(root->right);\r\n    vec.push_back(root->val);\r\n}\r\n\r\n// \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u51fd\u6570\uff0c\u7528\u4e8e\u904d\u5386\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u3001\u4e2d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u8def\u5f84\r\nvoid dfs(Tree* root) {\r\n    std::cout << '\u524d\u5e8f\u904d\u5386' << ' ';\r\n    pre_order(root);\r\n    dfs_print();\r\n    std::cout << std::endl;\r\n    std::cout << '\u4e2d\u5e8f\u904d\u5386' << ' ';\r\n    in_order(root);\r\n    dfs_print();\r\n    std::cout << std::endl;\r\n    std::cout << '\u540e\u5e8f\u904d\u5386' << ' ';\r\n    post_order(root);\r\n    dfs_print();\r\n    std::cout << std::endl;\r\n}\r\n```\r\n### \u4e8c\u53c9\u6811\u7684\u6570\u7ec4\u8868\u793a\r\n> \u5b8c\u5168\u4e8c\u53c9\u6811\u975e\u5e38\u9002\u5408\u7528\u6570\u7ec4\u8868\u793a, None\u53ea\u4f1a\u51fa\u73b0\u5728\u6700\u5e95\u5c42\u4e14\u9760\u53f3\u7684\u4f4d\u7f6e,\u6240\u4ee5\u5c42\u5e8f\u904d\u5386\u4e4b\u540eNone\u5168\u5728\u672b\u5c3e, \u53ef\u4ee5\u76f4\u63a5\u7701\u7565\r\n```c++\r\nclass Binary_Tree_Array\r\n{\r\n    public:\r\n    Binary_Tree_Array(std::vector<int> arr) {\r\n        tree_ = arr;\r\n    } \r\n    ~Binary_Tree_Array() {}\r\n    // \u83b7\u53d6\u5bb9\u91cf\r\n    int size() {\r\n        return tree_.size();\r\n    }\r\n    // \u83b7\u53d6\u7d22\u5f15\u4e3ai\u7684\u503c\r\n    int val(int i) {\r\n        if (i < 0 || i > size()) {\r\n            return INT_MAX;\r\n        }\r\n        return tree_[i];\r\n    }\r\n    // \u83b7\u53d6\u7d22\u5f15\u4e3ai\u7684\u5de6\u5b50\u8282\u70b9\u7d22\u5f15\r\n    int left(int i) {\r\n        return 2 * i + 1;\r\n    }\r\n    // \u83b7\u53d6\u7d22\u5f15\u4e3ai\u7684\u53f3\u5b50\u8282\u70b9\u7d22\u5f15\r\n    int right(int i) {\r\n        return 2 * i + 2;\r\n    }\r\n    // \u83b7\u53d6\u7d22\u5f15\u4e3ai\u7684\u7236\u8282\u70b9\u7d22\u5f15\r\n    int parent(int i) {\r\n        return (i - 1) / 2;\r\n    }\r\n    // \u5c42\u5e8f\u904d\u5386\r\n    void level_order() {\r\n        if (!tree_.empty()) {\r\n            for (int i : tree_)\r\n            {\r\n                std::cout << i << ' ';\r\n            }\r\n            std::cout << std::endl;\r\n        }\r\n    }\r\n    // \u524d\u4e2d\u540e\u5e8f\u904d\u5386\r\n    void pre_order() {\r\n        std::vector<int> vec_;\r\n        dfs(0, 'pre', vec_);\r\n        std::cout << 'pre : ';\r\n        for (int i : vec_) \r\n        {\r\n            if (i != INT_MAX) {\r\n                std::cout << i << ' ';\r\n            }\r\n        }\r\n        std::cout << std::endl;\r\n    }\r\n    void in_order() {\r\n        std::vector<int> vec_;\r\n        dfs(0, 'in', vec_);\r\n        std::cout << 'in : ';\r\n        for (int i : vec_) \r\n        {\r\n            if (i != INT_MAX) {\r\n                std::cout << i << ' ';\r\n            }\r\n        }\r\n        std::cout << std::endl;\r\n    }\r\n    void post_order() {\r\n        std::vector<int> vec_;\r\n        dfs(0, 'post', vec_);\r\n        std::cout << 'post : ';\r\n        for (int i : vec_) \r\n        {\r\n            if (i != INT_MAX) {\r\n                std::cout << i << ' ';\r\n            }\r\n        }\r\n        std::cout << std::endl;\r\n    }\r\n    private:\r\n    std::vector<int> tree_;\r\n    void dfs(int i, std::string order, std::vector<int> &vec_) {\r\n        if (val(i) == INT_MAX) {\r\n            return;\r\n        }\r\n        if (order == 'pre') {\r\n            vec_.push_back(val(i));\r\n        }\r\n        dfs(left(i), order, vec_);\r\n        if (order == 'in') {\r\n            vec_.push_back(val(i));\r\n        }\r\n        dfs(right(i), order, vec_);\r\n        if (order == 'post') {\r\n            vec_.push_back(val(i));\r\n        }\r\n    }\r\n};\r\n```\r\n### \u4e8c\u53c9\u641c\u7d22\u6811\r\n- \u63d2\u5165 : \u65f6\u95f4\u590d\u6742\u5ea6: O(logn)\r\n- \u67e5\u627e : \u65f6\u95f4\u590d\u6742\u5ea6: O(logn)\r\n- \u5220\u9664 : \u65f6\u95f4\u590d\u6742\u5ea6: O(logn)\r\n+ \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u662f\u5347\u5e8f\u7684\r\n> \u4e8c\u53c9\u641c\u7d22\u6811\u5220\u9664\u64cd\u4f5c\u5b8c\u6210\u540e\u9700\u4fdd\u6301\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28'\u5de6\u5b50\u6811 < \u6839\u8282\u70b9 < \u53f3\u5b50\u6811'\r\n> \u5220\u9664\u64cd\u4f5c\u6839\u636e\u8282\u70b9\u7684\u5ea6\u5206\u4e3a 0, 1, 2 \u4e09\u79cd\u60c5\u51b5\r\n> \u8282\u70b9\u5ea6\u4e3a0 : \u76f4\u63a5\u5220\u9664\r\n> \u8282\u70b9\u5ea6\u4e3a1 : \u5c06\u5f85\u5220\u8282\u70b9\u66ff\u6362\u4e3a\u5f85\u5220\u8282\u70b9\u7684\u5b50\u8282\u70b9\r\n> \u8282\u70b9\u5ea6\u4e3a2 : \u627e\u5230\u5de6\u5b50\u6811\u7684\u6700\u5927\u8282\u70b9\u6216\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8282\u70b9,\u6807\u8bb0\u8be5\u8282\u70b9, \u518d\u5220\u9664\u5de6\u5b50\u6811\u7684\u6700\u5927\u8282\u70b9\u6216\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u8282\u70b9, \u518d\u5c06\u5f85\u5220\u8282\u70b9\u66ff\u6362\u4e3a\u6807\u8bb0\u8282\u70b9\r\n```c++\r\n// \u4e8c\u53c9\u641c\u7d22\u6811\r\nclass Binary_Search_Tree\r\n{\r\n    public:\r\n    // \u63d2\u5165\r\n    void insert(int num) {\r\n        if (tree_ == nullptr) {\r\n            tree_ = new Tree(num);\r\n            return;\r\n        }\r\n        Tree *cur = tree_, *pre = nullptr;\r\n        // \u5faa\u73af\u67e5\u627e\u63d2\u5165\u4f4d\u7f6e\r\n        while (cur != nullptr) \r\n        {\r\n            if (cur->val == num) {\r\n                return;\r\n            }\r\n            // \u8bb0\u5f55\u4e0a\u4e00\u4e2a\u8282\u70b9\r\n            pre = cur;\r\n            if (cur->val < num) {\r\n                cur = cur->right;\r\n            } else {\r\n                cur = cur->left;\r\n            }\r\n        }\r\n        // \u63d2\u5165\u8282\u70b9\r\n        Tree* node = new Tree(num);\r\n        if (pre->val < num) {\r\n            pre->right = node;\r\n        } else {\r\n            pre->left = node;\r\n        }\r\n    }\r\n    // \u67e5\u627e\u8282\u70b9\r\n    Tree* search(int num) {\r\n        if (tree_ == nullptr) {\r\n            std::cout << '\u65e0\u8282\u70b9' << std::endl;\r\n            return nullptr;\r\n        }\r\n        Tree* cur = tree_;\r\n        while (cur != nullptr)\r\n        {\r\n            if (cur->val == num) {\r\n                return cur;\r\n            }\r\n            if (cur->val > num) {\r\n                cur = cur->left;\r\n            } else {\r\n                cur = cur->right;\r\n            }\r\n        }\r\n        std::cout << '\u65e0\u8282\u70b9' << std::endl;\r\n        return nullptr;\r\n    }\r\n    // \u5220\u9664\u8282\u70b9\r\n    void remove(int num) {\r\n        // \u6839\u8282\u70b9\u4e3a\u7a7a\r\n        if (tree_ == nullptr) {\r\n            return;\r\n        }\r\n        Tree* cur = tree_, *pre = nullptr;\r\n        while (cur != nullptr)\r\n        {\r\n            // \u627e\u5f85\u5220\u8282\u70b9\r\n            if (cur->val == num) {\r\n                break;\r\n            }\r\n            pre = cur;\r\n            if (cur->val > num) {\r\n                cur = cur->left;\r\n            } else {\r\n                cur = cur->right;\r\n            }\r\n        }\r\n        // \u65e0\u5220\u9664\u8282\u70b9\r\n        if (cur == nullptr) {\r\n            return;\r\n        }\r\n        // \u5220\u9664\u8282\u70b9\u7684\u5ea6\u4e3a 0 \u6216 1\r\n        if (cur->left == nullptr || cur->right == nullptr) {\r\n            // \u8282\u70b9\u7684\u5ea6\u4e3a 0 / 1, node = nullpre / \u5b50\u8282\u70b9\r\n            Tree* node = cur->left != nullptr ? cur->left : cur->right;\r\n            // \u662f\u5426\u4e3a\u6839\u8282\u70b9\r\n            if (cur != tree_) {\r\n                // \u5de6\u63a5\u5de6,\u53f3\u63a5\u53f3\r\n                if (pre->left == cur) {\r\n                    pre->left = node;\r\n                } else {\r\n                    pre->right = node;\r\n                }\r\n            } else {\r\n                // \u82e5\u4e3a\u6839\u8282\u70b9,\u5219\u91cd\u65b0\u6307\u5b9a\u6839\u8282\u70b9\r\n                tree_ = node;\r\n            }\r\n            delete cur;\r\n        } // \u5220\u9664\u8282\u70b9\u7684\u5ea6\u4e3a 2\r\n        else {\r\n            // // \u53f3\u6811\u7684\u6700\u5c0f\u8282\u70b9\r\n            // Tree* min_node = cur->right;\r\n            // while (min_node->left != nullptr)\r\n            // {\r\n            //     min_node = min_node->left;\r\n            // }\r\n            // int temp_val = min_node->val;\r\n            // // \u9012\u5f52\u5220\u9664\r\n            // remove(temp_val);\r\n            // cur->val = temp_val;\r\n\r\n            // \u5de6\u6811\u7684\u6700\u5927\u8282\u70b9\r\n            Tree* max_node = cur->left;\r\n            while (max_node->right != nullptr)\r\n            {\r\n                max_node = max_node->right;\r\n            }\r\n            int temp_val = max_node->val;\r\n            remove(temp_val);\r\n            cur->val = temp_val;\r\n        }\r\n    }\r\n    void bst_print() {\r\n        std::vector<int> vec;\r\n        in_order(vec, tree_);\r\n        for (int i : vec) \r\n        {\r\n            std::cout << i << ' ';\r\n        }\r\n        std::cout << std::endl;\r\n    }\r\n    // \u4e2d\u5e8f\u904d\u5386\r\n    void in_order(std::vector<int>& v, Tree* root) {\r\n        if (root == nullptr) {\r\n            return;\r\n        }\r\n        in_order(v, root->left);\r\n        v.push_back(root->val);\r\n        in_order(v, root->right);\r\n    }\r\n    private:\r\n    Tree* tree_ = nullptr;\r\n};\r\n```\r\n### AVL\u6811\r\n- AVL\u6811\u5373\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u53c8\u662f\u5e73\u8861\u4e8c\u53c9\u6811,\u540c\u65f6\u6ee1\u8db3\u4e24\u7c7b\u4e8c\u53c9\u6811\u7684\u6027\u8d28,\u662f\u4e00\u79cd\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811.\r\n- AVL\u6811\u7684\u76f8\u5173\u64cd\u4f5c\u9700\u8981\u83b7\u53d6\u8282\u70b9\u9ad8\u5ea6,\u6240\u6709\u5728\u8282\u70b9\u4e2d\u9700\u8981\u6dfb\u52a0\u9ad8\u5ea6\u5c5e\u6027\r\n- AVL\u6811\u7684\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u9700\u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6, \u5e76\u8c03\u6574\u5e73\u8861\u56e0\u5b50.\u81ea\u5e95\u5411\u4e0a\u6267\u884c\u65cb\u8f6c\u64cd\u4f5c,\u4f7f\u5931\u8861\u56e0\u5b50\u6062\u590d\u5e73\u8861.\r\n- \u8282\u70b9\u9ad8\u5ea6: \u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u957f\u5ea6. \u53f6\u5b50\u8282\u70b9\u9ad8\u5ea6\u4e3a 0, \u7a7a\u8282\u70b9\u9ad8\u5ea6\u4e3a -1.\r\n- \u5e73\u8861\u56e0\u5b50 : \u8282\u70b9\u5de6\u5b50\u6811\u9ad8\u5ea6 - \u8282\u70b9\u53f3\u5b50\u6811\u9ad8\u5ea6. \u7a7a\u8282\u70b9\u5e73\u8861\u56e0\u5b50\u4e3a 0.\r\n> \u8bbe\u5e73\u8861\u56e0\u5b50\u4e3af, \u5219\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5e73\u8861\u56e0\u5b50\u7684\u7edd\u5bf9\u503c\u4e0d\u5927\u4e8e1, \u5373 |f| <= 1.\r\n> \u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\u7684\u7edd\u5bf9\u503c > 1\u7684\u8282\u70b9\u4e3a'\u5931\u8861\u8282\u70b9'.\r\n>\r\n\u4ee5\u4e0b\u4e3aAVL\u6811\u7684\u76f8\u5173\u64cd\u4f5c\r\n```c++\r\n// AVL\u6811\u8282\u70b9\r\nstruct TreeNode\r\n{\r\n    int val{};\r\n    int height = 0; // \u8282\u70b9\u9ad8\u5ea6\r\n    TreeNode *left{};\r\n    TreeNode *right{};\r\n    TreeNode() = default;\r\n    explicit TreeNode(int x) : val(x){}\r\n};\r\nclass AVL_Tree\r\n{\r\n    public:\r\n    AVL_Tree() {\r\n        root = nullptr;\r\n    }\r\n    AVL_Tree(TreeNode* node) {\r\n        root = node;\r\n    }\r\n    ~AVL_Tree() {}\r\n        // \u83b7\u53d6\u8282\u70b9\u9ad8\u5ea6\r\n    int height(TreeNode* node) {\r\n        return node == nullptr ? -1 : node->height;\r\n    }\r\n    // \u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6\r\n    void up_data_height(TreeNode* node) {\r\n        node->height = std::max(height(node->left), height(node->right)) + 1;\r\n    }\r\n    // \u83b7\u53d6\u5e73\u8861\u56e0\u5b50\r\n    int balance_factor(TreeNode* node) {\r\n        // \u7a7a\u8282\u70b9\u5e73\u8861\u56e0\u5b50\u4e3a 0\r\n        if (node == nullptr) {\r\n            return 0;\r\n        }\r\n        // \u8282\u70b9\u5e73\u8861\u56e0\u5b50 = \u5de6\u5b50\u6811\u9ad8\u5ea6 - \u53f3\u5b50\u6811\u9ad8\u5ea6\r\n        return height(node->left) - height(node->right);\r\n    }\r\n    // \u53f3\u65cb\r\n    TreeNode* right_rotate(TreeNode* node) {\r\n        TreeNode* child = node->left;\r\n        TreeNode* grand_child = child->right;\r\n        // \u4ee5child\u4e3a\u539f\u70b9,\u5c06node\u53f3\u65cb\r\n        child->right = node;\r\n        node->left = grand_child;\r\n        // \u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6\r\n        up_data_height(node);\r\n        up_data_height(child);\r\n        // \u8fd4\u56de\u65cb\u8f6c\u540e\u5b50\u6811\u6839\u8282\u70b9\r\n        return child;\r\n    }\r\n    // \u5de6\u65cb\r\n    TreeNode* left_rotate(TreeNode* node) {\r\n        TreeNode* child = node->right;\r\n        TreeNode* grand_child = child->left;\r\n        // \u4ee5child\u4e3a\u539f\u70b9,\u5c06node\u5de6\u65cb\r\n        child->left = node;\r\n        node->right = grand_child;\r\n        // \u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6\r\n        up_data_height(node);\r\n        up_data_height(child);\r\n        return child;\r\n    }\r\n    // \u65cb\u8f6c\u64cd\u4f5c\r\n    TreeNode* rotate(TreeNode* node) {\r\n        // \u83b7\u53d6\u8282\u70b9node\u7684\u5e73\u8861\u56e0\u5b50\r\n        int node_balance_factor = balance_factor(node);\r\n        // \u5de6\u504f\u6811\r\n        if (node_balance_factor > 1) {\r\n            if (balance_factor(node->left) >= 0) {\r\n                // \u53f3\u65cb\r\n                return right_rotate(node);\r\n            } else {\r\n                // \u5148\u5de6\u65cb\u540e\u53f3\u65cb\r\n                node->left = left_rotate(node->left);\r\n                return right_rotate(node);\r\n            }\r\n        }\r\n        // \u53f3\u504f\u6811\r\n        if (node_balance_factor < -1) {\r\n            if (balance_factor(node->right) <= 0) {\r\n                // \u5de6\u65cb\r\n                return left_rotate(node);\r\n            } else {\r\n                // \u5148\u53f3\u65cb\u540e\u5de6\u65cb\r\n                node->right = right_rotate(node->right);\r\n                return left_rotate(node);\r\n            }\r\n        }\r\n        // \u5e73\u8861\u6811,\u65e0\u9700\u65cb\u8f6c\r\n        return node;\r\n    }\r\n    // \u63d2\u5165\u8282\u70b9\r\n    void insert(int val) {\r\n        root =  insert_helper(root, val);\r\n    }\r\n    // \u9012\u5f52\u63d2\u5165\r\n    TreeNode* insert_helper(TreeNode* node, int val) {\r\n        // \u7a7a\u8282\u70b9,\u76f4\u63a5\u6784\u9020\r\n        if (node == nullptr) {\r\n            return new TreeNode(val);\r\n        } \r\n        // \u5bfb\u627e\u6b63\u786e\u63d2\u5165\u70b9\r\n        if (val < node->val) {\r\n            node->left = insert_helper(node->left, val);\r\n        } else if (val > node->val) {\r\n            node->right = insert_helper(node->right, val);\r\n        } else {\r\n            // \u6709\u91cd\u590d\u8282\u70b9\u76f4\u63a5\u8fd4\u56de\r\n            return node;\r\n        }\r\n        // \u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6\r\n        up_data_height(node);\r\n        // \u6267\u884c\u65cb\u8f6c\u64cd\u4f5c,\u4f7f\u8be5\u5b50\u6811\u91cd\u65b0\u6062\u590d\u5e73\u8861\r\n        node = rotate(node);\r\n        // \u8fd4\u56de\u6839\u8282\u70b9\r\n        return node;\r\n    }\r\n    // \u5220\u9664\u8282\u70b9\r\n    void remove(int val) {\r\n        root = remove_helper(root, val);\r\n    }\r\n    // \u9012\u5f52\u5220\u9664\r\n    TreeNode* remove_helper(TreeNode* node, int val) {\r\n        if (node == nullptr) {\r\n            return nullptr;\r\n        }\r\n        // \u5bfb\u627e\u8282\u70b9\u5220\u9664\r\n        if (val < node->val) {\r\n            node->left = remove_helper(node->left, val);\r\n        } else if (val > node->val) {\r\n            node->right = remove_helper(node->right, val);\r\n        } else {\r\n            if (node->left == nullptr || node->right == nullptr) {\r\n                // \u5b50\u8282\u70b9\u6570\u91cf\u4e3a 0/1 \u7684\u60c5\u51b5\r\n                TreeNode* child = node->left != nullptr ? node->left : node->right;\r\n                if (child == nullptr) {\r\n                    // \u5b50\u8282\u70b9\u4e3a 0, \u76f4\u63a5\u5220\u9664\r\n                    delete node;\r\n                    return nullptr;\r\n                } else {\r\n                    // \u5b50\u8282\u70b9\u4e3a 1, \u5220\u9664\u5e76\u66ff\u6362\r\n                    delete node;\r\n                    node = child;\r\n                }\r\n            } else {\r\n                // \u5b50\u8282\u70b9\u6570\u91cf\u4e3a 2 \u7684\u60c5\u51b5\r\n                // \u7528\u5de6\u5b50\u6811\u6700\u5927\u503c\u8282\u70b9\u66ff\u6362\r\n                TreeNode* left_child = node->left;\r\n                // \u627e\u6700\u5927\u503c\u8282\u70b9\r\n                while (left_child->right != nullptr) \r\n                {\r\n                    left_child = left_child->right;\r\n                }\r\n                int max_val = left_child->val;\r\n                // \u9012\u5f52\u5220\u9664\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\u8282\u70b9\r\n                node->left = remove_helper(node->left, max_val);\r\n                // \u503c\u66ff\u6362\r\n                node->val = max_val;\r\n                // // \u7528\u53f3\u5b50\u6811\u6700\u5c0f\u503c\u8282\u70b9\u66ff\u6362\r\n                // TreeNode* right_child = node->right;\r\n                // while (right_child->left != nullptr) \r\n                // {\r\n                //     right_child = right_child->left;\r\n                // }\r\n                // int min_val = right_child->val;\r\n                // node->right = remove_helper(node->right, min_val);\r\n                // node->val = min_val;\r\n            }\r\n        }\r\n        // \u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6\r\n        up_data_height(node); \r\n        // \u6267\u884c\u65cb\u8f6c\u64cd\u4f5c,\u4f7f\u8be5\u5b50\u6811\u5e73\u8861\r\n        node = rotate(node);\r\n        // \u8fd4\u56de\u6839\u8282\u70b9\r\n        return node;\r\n    }\r\n    // \u6253\u5370\r\n    void AVL_print() {\r\n        // vec\u5b58\u50a8\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50\r\n        std::vector<int> vec;\r\n        in_order(root, vec);\r\n        std::cout << std::endl;\r\n        for (int i : vec) \r\n        {\r\n            std::cout << i << ' ';\r\n        }\r\n        std::cout << std::endl;\r\n    }\r\n    void in_order(TreeNode* node, std::vector<int>& v) {\r\n        if (node == nullptr) {\r\n            return;\r\n        } \r\n        in_order(node->left, v);\r\n        std::cout << node->val << ' ';\r\n        v.push_back(balance_factor(node));\r\n        in_order(node->right, v);\r\n    }\r\n    private:\r\n    TreeNode* root;\r\n};\r\n```\r\n#### AVL\u6811\u7684\u65cb\u8f6c\u64cd\u4f5c\r\n- AVL\u6811\u7684\u65cb\u8f6c\u64cd\u4f5c\u5206\u4e3a\u56db\u79cd: \u5de6\u65cb, \u53f3\u65cb, \u5148\u5de6\u65cb\u540e\u53f3\u65cb, \u5148\u53f3\u65cb\u540e\u5de6\u65cb.\r\n- \u5de6\u53f3\u65cb\u4e3a\u5bf9\u79f0\u64cd\u4f5c\r\n1. \u5de6\u65cb\r\n<img width='504' alt='image' src='https://github.com/user-attachments/assets/363d2ae0-2ac1-4307-9116-25d29ad1d6ee'>\r\n\r\n```c++\r\n// \u5de6\u65cb\r\n    TreeNode* left_rotate(TreeNode* node) {\r\n        TreeNode* child = node->right;\r\n        TreeNode* grand_child = child->left;\r\n        // \u4ee5child\u4e3a\u539f\u70b9,\u5c06node\u5de6\u65cb\r\n        child->left = node;\r\n        node->right = grand_child;\r\n        // \u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6\r\n        up_data_height(node);\r\n        up_data_height(child);\r\n        return child;\r\n    }\r\n```\r\n2. \u53f3\u65cb\r\n<img width='513' alt='image' src='https://github.com/user-attachments/assets/eb351226-65e4-4259-83b7-d221bcfe00f0'>\r\n\r\n```c++\r\n// \u53f3\u65cb\r\n    TreeNode* right_rotate(TreeNode* node) {\r\n        TreeNode* child = node->left;\r\n        TreeNode* grand_child = child->right;\r\n        // \u4ee5child\u4e3a\u539f\u70b9,\u5c06node\u53f3\u65cb\r\n        child->right = node;\r\n        node->left = grand_child;\r\n        // \u66f4\u65b0\u8282\u70b9\u9ad8\u5ea6\r\n        up_data_height(node);\r\n        up_data_height(child);\r\n        // \u8fd4\u56de\u65cb\u8f6c\u540e\u5b50\u6811\u6839\u8282\u70b9\r\n        return child;\r\n    }\r\n```\r\n3. \u5148\u5de6\u65cb\u540e\u53f3\u65cb\r\n<img width='587' alt='image' src='https://github.com/user-attachments/assets/a7457929-6867-408e-82bf-add2f6d9aacf'>\r\n\r\n4. \u5148\u53f3\u65cb\u540e\u5de6\u65cb\r\n<img width='531' alt='image' src='https://github.com/user-attachments/assets/30cdfb04-2ba0-423c-b1f8-c512f45ab126'>\r\n\r\n- \u901a\u8fc7AVL\u6811\u7684\u4e0d\u7528\u60c5\u51b5\u9009\u62e9\u4e0d\u540c\u7684\u65cb\u8f6c\u64cd\u4f5c,\u4f7f\u6811\u91cd\u65b0\u6062\u590d\u5e73\u8861.\r\n\u4ee5\u4e0b\u4e3a\u5c01\u88c5\u7684\u65cb\u8f6c\u64cd\u4f5c\u51fd\u6570\r\n```c++\r\n// \u65cb\u8f6c\u64cd\u4f5c\r\n    TreeNode* rotate(TreeNode* node) {\r\n        // \u83b7\u53d6\u8282\u70b9node\u7684\u5e73\u8861\u56e0\u5b50\r\n        int node_balance_factor = balance_factor(node);\r\n        // \u5de6\u504f\u6811\r\n        if (node_balance_factor > 1) {\r\n            if (balance_factor(node->left) >= 0) {\r\n                // \u53f3\u65cb\r\n                return right_rotate(node);\r\n            } else {\r\n                // \u5148\u5de6\u65cb\u540e\u53f3\u65cb\r\n                node->left = left_rotate(node->left);\r\n                return right_rotate(node);\r\n            }\r\n        }\r\n        // \u53f3\u504f\u6811\r\n        if (node_balance_factor < -1) {\r\n            if (balance_factor(node->right) <= 0) {\r\n                // \u5de6\u65cb\r\n                return left_rotate(node);\r\n            } else {\r\n                // \u5148\u53f3\u65cb\u540e\u5de6\u65cb\r\n                node->right = right_rotate(node->right);\r\n                return left_rotate(node);\r\n            }\r\n        }\r\n        // \u5e73\u8861\u6811,\u65e0\u9700\u65cb\u8f6c\r\n        return node;\r\n    }\r\n```\r\n#### AVL\u6811\u65cb\u8f6c\u7684\u9009\u62e9\r\n| \u5931\u8861\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50 | \u5b50\u8282\u70b9\u7684\u5e73\u8861\u56e0\u5b50 | \u5e94\u91c7\u7528\u7684\u65cb\u8f6c\u64cd\u4f5c |\r\n| :--: | :--: | :--: |\r\n| > 1(\u5de6\u504f\u6811) | >= 0 | \u53f3\u65cb |\r\n| > 1(\u5de6\u504f\u6811) | < 0 | \u5148\u5de6\u65cb\u540e\u53f3\u65cb |\r\n| < -1(\u53f3\u504f\u6811) | <= 0 | \u5de6\u65cb |\r\n| < -1(\u53f3\u504f\u6811) | > 0 | \u5148\u53f3\u65cb\u540e\u5de6\u65cb |\r\n\r\n\u3002", "top": 0, "createdAt": 1728059757, "style": "", "script": "<script src='https://code.buxiantang.top/assets/articletoc.js'></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/110390930?u=e650bc80688d9b64f5c5dd69d6cf9e822186493e&v=4", "createdDate": "2024-10-05", "dateLabelColor": "#bc4c00"}, "P5": {"htmlDir": "docs/post/Markdown-yu-fa.html", "labels": ["Markdown"], "postTitle": "Markdown\u8bed\u6cd5", "postUrl": "post/Markdown-yu-fa.html", "postSourceUrl": "https://github.com/H-TXSL/Nobody_Cares.github.io/issues/5", "commentNum": 0, "wordCount": 5007, "description": "# Markdown\u8bed\u8a00\r\n+ \u63d0\u793a: \u9002\u7528\u4e0eGithub\u4e0a\u7684Markdown\u6587\u672c\u7f16\u8f91\r\n+ \u5728Github\u4e2d\u7684Markdown\u7f16\u8f91\u5668\u4e2d,\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4e09\u79cd\u4e0d\u540c\u7684\u8bed\u6cd5\u5728\u4ee3\u7801\u5757\u4e2d\u521b\u5efa\u56fe\u8868\u5173\u7cfb\u56fe\uff1amermaid\u3001geoJSON \u548c topoJSON\u3001ASCII STL.\r\n[\u5173\u4e8e\u56fe\u8868\u5173\u7cfb\u56fe\u8bf7\u5728\u6b64\u5904\u67e5\u8be2](https://docs.github.com/zh/get-started/writing-on-github/working-with-advanced-formatting/creating-diagrams)\r\n+ \u5728Github\u4e2d\u7684Markdown\u7f16\u8f91\u5668\u4e2d\u652f\u6301LaTeX\u8bed\u6cd5\u663e\u793a\u6570\u5b66\u8868\u8fbe\u5f0f.\r\n[\u5173\u4e8eLaTeX\u8bed\u6cd5\u8bf7\u5728\u6b64\u5904\u67e5\u8be2](https://docs.github.com/zh/get-started/writing-on-github/working-with-advanced-formatting/writing-mathematical-expressions)\r\n## \u6807\u9898\r\n- \u521b\u5efa\u6807\u9898\r\n- \u6700\u59276\u4e2a\u5c42\u6b21\u7ed3\u6784\u7684\u6807\u9898\r\n```Markdown\r\n# \u6807\u9898\u4e00\r\n## \u6807\u9898\u4e8c\r\n### \u6807\u9898\u4e09\r\n......\r\n###### \u6807\u9898\u516d\r\n```\r\n# \u6807\u9898\u4e00\r\n## \u6807\u9898\u4e8c\r\n### \u6807\u9898\u4e09\r\n......\r\n###### \u6807\u9898\u516d\r\n***\r\n<a name='set1'></a>\r\n\r\n## \u8bbe\u7f6e\u6587\u672c\u6837\u5f0f\r\n| \u8bed\u6cd5 | \u4f8b\u5b50 | \u8f93\u51fa | \r\n| :--: | :--: | :--: |\r\n| ** **\u6216\u8005__ __ | `**\u7c97\u4f53**` | **\u7c97\u4f53** |\r\n| * *\u6216\u8005_ _ | `*\u659c\u4f53*` | *\u659c\u4f53* |\r\n| ~~ ~~ | `~~\u5220\u9664\u7ebf~~` | ~~\u5220\u9664\u7ebf~~ |\r\n| ** ** \u548c * * | `**\u7c97\u4f53*\u659c\u4f53*\u5b57**` | **\u7c97\u4f53*\u659c\u4f53*\u5b57**(\u7c97\u4f53\u5d4c\u5957\u659c\u4f53) |\r\n| * * \u548c ** ** | `*\u659c\u4f53**\u7c97\u4f53**\u5b57*` | *\u659c\u4f53**\u7c97\u4f53**\u5b57*(\u659c\u4f53\u5d4c\u5957\u7c97\u4f53) |\r\n| *** *** | `***\u5168\u90e8\u7c97\u4f53\u52a0\u659c\u4f53***` | ***\u5168\u90e8\u7c97\u4f53\u52a0\u659c\u4f53*** |\r\n| `<sub> </sub>` | \u8fd9\u662f\u4e00\u4e2a`<sub>\u4e0b\u6807</sub>` | \u8fd9\u662f\u4e00\u4e2a<sub>\u4e0b\u6807</sub> |\r\n| `<sup> </sup>` | \u8fd9\u662f\u4e00\u4e2a`<sup>\u4e0a\u6807</sup>` | \u8fd9\u662f\u4e00\u4e2a<sup>\u4e0a\u6807</sup> |\r\n\r\n`***`\u4ee3\u8868\u5206\u5272\u7ebf\r\n***\r\n\u7a7a\u884c\u8868\u793a\u6bb5\u843d\u7684\u5206\u9694\r\n```\r\n// \u4e5f\u53ef\u4ee5\u7528HTML\u4e2d\u7684<br>\u6807\u7b7e\u7cbe\u51c6\u6362\u884c\r\n\u7b2c\u4e00\u6bb5<br>\r\n\u7b2c\u4e8c\u6bb5\r\n```\r\n\u7b2c\u4e00\u6bb5<br>\r\n\u7b2c\u4e8c\u6bb5\r\n\r\n## \u5f15\u7528\u6587\u5b57\r\n- \u5f15\u7528\u7684\u6587\u672c\u662f\u7f29\u8fdb\u7684,\u4f1a\u5177\u6709\u4e0d\u540c\u5b57\u4f53\u989c\u8272\r\n```Markdown\r\n\u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u6587\u672c\r\n> \u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u6587\u672c\r\n>> \u591a\u91cd\u5f15\u7528\r\n>>> ...\r\n```\r\n\u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u6587\u672c\r\n> \u8fd9\u662f\u4e00\u4e2a\u5f15\u7528\u6587\u672c\r\n>> \u591a\u91cd\u5f15\u7528\r\n>>> ....\r\n## \u5f15\u7528\u4ee3\u7801\r\n- \u7528\u591a\u4e2a\u53cd\u5f15\u53f7\u53ef\u4ee5\u533a\u5206\u5d4c\u5957\u7684\u4ee3\u7801 -> \u5728\u9694\u79bb\u4ee3\u7801\u5757\u4e2d\u663e\u793a\u4e09\u4e2a\u53cd\u5f15\u53f7,\u7528\u56db\u4e2a\u53cd\u5f15\u53f7\u5305\u88f9\r\n1. \u5355\u884c\u5f15\u7528 -> \u7531\u5355\u4e2a\u53cd\u5f15\u53f7\u8fde\u63a5\u9996\u5c3e\r\n```Markdown\r\n\u8fd9\u662f\u4e00\u4e2a`\u5355\u884c\u5f15\u7528`.\r\n```\r\n\u8fd9\u662f\u4e00\u4e2a`\u5355\u884c\u5f15\u7528`.\r\n2. \u591a\u884c\u5f15\u7528 -> \u7531\u4e09\u4e2a\u53cd\u5f15\u53f7\u8fde\u63a5\u9996\u5c3e\r\n- \u53ef\u4ee5\u5728\u4ee3\u7801\u5757\u4e2d\u589e\u6dfb\u8bed\u8a00\u6807\u8bc6\u7b26\u4ee5\u542f\u7528\u8bed\u6cd5\u9ad8\u4eae\r\n````Markdown\r\n\u4ee5\u4e0b\u4e3a\u591a\u884c\u5f15\u7528:\r\n```c++\r\n#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n    cout<<'Hello World!'<<endl;\r\n    return 0;\r\n}\r\n```\r\n````\r\n\u4ee5\u4e0b\u4e3a\u591a\u884c\u5f15\u7528:\r\n\r\n```c++\r\n#include<iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n    cout<<'Hello World!'<<endl;\r\n    return 0;\r\n}\r\n```\r\n## \u94fe\u63a5\r\n- \u94fe\u63a5\u7684\u6587\u672c\u662f\u84dd\u8272\u7684,\u53ef\u4ee5\u70b9\u51fb\u8df3\u8f6c\r\n```Markdown\r\n// \u5185\u8054\u5f0f\u94fe\u63a5 -> [\u94fe\u63a5\u6587\u672c](\u94fe\u63a5\u5730\u5740)\r\n[\u4e2a\u4eba\u535a\u5ba2](https://h-txsl.github.io/Nobody_Cares.github.io/)\r\n// \u5f15\u7528\u5f0f\u94fe\u63a5 -> [\u94fe\u63a5\u6587\u672c][\u94fe\u63a5\u6807\u8bc6\u7b26]\r\n// \u5728\u6587\u6863\u7ed3\u5c3e\u5904\u6dfb\u52a0\u94fe\u63a5\u6807\u8bc6\u7b26\r\n// \u94fe\u63a5\u6807\u8bc6\u7b26\u53ef\u4ee5\u662f\u4efb\u610f\u5b57\u7b26\u4e32\r\n[\u4e2a\u4eba\u535a\u5ba2][blog]\r\n\r\n[blog]: https://h-txsl.github.io/Nobody_Cares.github.io/\r\n```\r\n[\u4e2a\u4eba\u535a\u5ba2](https://h-txsl.github.io/Nobody_Cares.github.io/)\r\n[\u4e2a\u4eba\u535a\u5ba2][blog]\r\n\r\n## Markdown\u6587\u6863\u5185\u90e8\u8df3\u8f6c\r\n\r\n```Markdown\r\n// \u6807\u9898\u8df3\u8f6c\r\n// \u8df3\u8f6c\u81f3\u8bbe\u7f6e\u6587\u672c\u6837\u5f0f\r\n[\u8bbe\u7f6e\u6587\u672c\u6837\u5f0f](#\u8bbe\u7f6e\u6587\u672c\u6837\u5f0f)\r\n\r\n// \u81ea\u5b9a\u4e49\u951a\u70b9\u8df3\u8f6c\r\n// \u4f7f\u7528HTML\u7684\u951a\u70b9\u6807\u7b7e<a>\u548cid\u5c5e\u6027\u6765\u5b9e\u73b0\u6587\u6863\u5185\u90e8\u8df3\u8f6c\r\n<a name='\u81ea\u5b9a\u4e49\u6807\u8bc6'></a>\r\n// \u8df3\u8f6c\u81f3\u8bbe\u7f6e\u6587\u672c\u6837\u5f0f\r\n\r\n[\u81ea\u5b9a\u4e49\u951a\u70b9\u8df3\u8f6c](#user-content-set1)\r\n\r\n// \u7531\u4e8e\u5728\u8bbe\u7f6e\u6587\u672c\u6837\u5f0f\u5904\u8bbe\u7f6e\u4e86\u951a\u70b9,\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u8df3\u8f6c\r\n// <a name='set1'></a>\r\n// \u8865\u5145: [](#\u8fd9\u91cc\u5f15\u7528\u7684\u951a\u70b9\u5168\u4e3a\u5b57\u6bcd\u5c0f\u5199,\u7a7a\u683c\u7528-\u4ee3\u66ff, \u53ef\u4ee5\u4e2d\u6587)\r\n// \u5f15\u7528\u65f6\u8981\u52a0\u4e0auser-content-\u524d\u7f00\r\n```\r\n[\u8bbe\u7f6e\u6587\u672c\u6837\u5f0f](#\u8bbe\u7f6e\u6587\u672c\u6837\u5f0f)\r\n[\u81ea\u5b9a\u4e49\u951a\u70b9\u8df3\u8f6c](#user-content-set1)\r\n- \u56fe\u7247\u94fe\u63a5\r\n>\u901a\u8fc7\u6dfb\u52a0 ! \u5e76 \u5c06 alt \u6587\u672c\u7528 [ ] \u62ec\u8d77\u6765\uff0c\u53ef\u663e\u793a\u56fe\u50cf\u3002", "top": 0, "createdAt": 1728144169, "style": "<style>.markdown-alert{padding:0.5rem 1rem;margin-bottom:1rem;border-left:.25em solid var(--borderColor-default,var(--color-border-default));}.markdown-alert .markdown-alert-title {display:flex;font-weight:var(--base-text-weight-medium,500);align-items:center;line-height:1;}.markdown-alert>:first-child {margin-top:0;}.markdown-alert>:last-child {margin-bottom:0;}</style><style>.markdown-alert.markdown-alert-note {border-left-color:var(--borderColor-accent-emphasis, var(--color-accent-emphasis));background-color:var(--color-accent-subtle);}.markdown-alert.markdown-alert-note .markdown-alert-title {color: var(--fgColor-accent,var(--color-accent-fg));}</style><style>.markdown-alert.markdown-alert-tip {border-left-color:var(--borderColor-success-emphasis, var(--color-success-emphasis));background-color:var(--color-success-subtle);}.markdown-alert.markdown-alert-tip .markdown-alert-title {color: var(--fgColor-success,var(--color-success-fg));}</style><style>.markdown-alert.markdown-alert-important {border-left-color:var(--borderColor-done-emphasis, var(--color-done-emphasis));background-color:var(--color-done-subtle);}.markdown-alert.markdown-alert-important .markdown-alert-title {color: var(--fgColor-done,var(--color-done-fg));}</style><style>.markdown-alert.markdown-alert-warning {border-left-color:var(--borderColor-attention-emphasis, var(--color-attention-emphasis));background-color:var(--color-attention-subtle);}.markdown-alert.markdown-alert-warning .markdown-alert-title {color: var(--fgColor-attention,var(--color-attention-fg));}</style><style>.markdown-alert.markdown-alert-caution {border-left-color:var(--borderColor-danger-emphasis, var(--color-danger-emphasis));background-color:var(--color-danger-subtle);}.markdown-alert.markdown-alert-caution .markdown-alert-title {color: var(--fgColor-danger,var(--color-danger-fg));}</style>", "script": "<script src='https://code.buxiantang.top/assets/articletoc.js'></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/110390930?u=e650bc80688d9b64f5c5dd69d6cf9e822186493e&v=4", "createdDate": "2024-10-06", "dateLabelColor": "#bc4c00"}, "P6": {"htmlDir": "docs/post/C++-wen-jian-cao-zuo.html", "labels": ["C++"], "postTitle": "C++\u6587\u4ef6\u64cd\u4f5c", "postUrl": "post/C%2B%2B-wen-jian-cao-zuo.html", "postSourceUrl": "https://github.com/H-TXSL/Nobody_Cares.github.io/issues/6", "commentNum": 0, "wordCount": 8182, "description": "+ \u6240\u9700\u5934\u6587\u4ef6`#include <fstream>`\r\n\r\n> \u5305\u542b fstream \u7c7b, ifstream \u7c7b, ofstream \u7c7b.  \r\nfstream \u8bfb\u5199\r\n>\r\n> ifstream \u8bfb\r\n>\r\n> ofstream \u5199\r\n>\r\n\r\n\r\n\r\n## \u6253\u5f00\u6587\u4ef6,\u6ca1\u6709\u6b64\u6587\u4ef6,\u5219\u521b\u5efa\u5e76\u6253\u5f00\r\n\u51fd\u6570\u539f\u578b `void open(const char* filename, ios_base::openmode mode);`\r\n\r\nfilename \u6587\u4ef6\u540d\tmode \u6253\u5f00\u6a21\u5f0f\r\n\r\n> \u5e38\u89c1\u7684\u6253\u5f00\u6a21\u5f0f\r\n>\r\n> std::ios::in\uff1a\u4ee5\u53ea\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\u3002", "top": 0, "createdAt": 1729972449, "style": "", "script": "<script src='https://code.buxiantang.top/assets/articletoc.js'></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/110390930?u=e650bc80688d9b64f5c5dd69d6cf9e822186493e&v=4", "createdDate": "2024-10-27", "dateLabelColor": "#bc4c00"}, "P7": {"htmlDir": "docs/post/cong-ling-kai-shi-de-STL-sheng-huo.html", "labels": ["C++"], "postTitle": "\u4ece\u96f6\u5f00\u59cb\u7684STL\u751f\u6d3b", "postUrl": "post/cong-ling-kai-shi-de-STL-sheng-huo.html", "postSourceUrl": "https://github.com/H-TXSL/Nobody_Cares.github.io/issues/7", "commentNum": 0, "wordCount": 4938, "description": "# \u4ece\u96f6\u5f00\u59cb\u7684STL\u751f\u6d3b\r\n> \u53c2\u8003[cppreference](https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5)\r\n# \u76ee\u5f55\r\n> - \u5e8f\u5217\r\n> [array](#array)\r\n> [vector](#vector)\r\n> [\u8fed\u4ee3\u5668\u56fe\u793a](#\u8fed\u4ee3\u5668\u56fe\u793a)\r\n## array\r\n> \u5934\u6587\u4ef6 `#include <array>`\r\n***\r\n> - \u6210\u5458\u51fd\u6570\r\n>   - \u6210\u5458\u8bbf\u95ee\r\n> [at \u5e26\u8d8a\u754c\u8bbf\u95ee\u68c0\u67e5](#user-content-arr1)\r\n> [operator[] \u8bbf\u95ee\u6307\u5b9a\u5143\u7d20, \u65e0\u8fb9\u754c\u68c0\u67e5](#user-content-arr2)\r\n> [front \u8bbf\u95ee\u7b2c\u4e00\u4e2a\u5143\u7d20](#user-content-arr3)\r\n> [back \u8bbf\u95ee\u6700\u540e\u4e00\u4e2a\u5143\u7d20](#user-content-arr4)\r\n> [data \u76f4\u63a5\u8bbf\u95ee\u5e95\u5c42\u8fde\u7eed\u5b58\u50a8](#user-content-arr5)\r\n>  - \u8fed\u4ee3\u5668\r\n>[\u8fed\u4ee3\u5668](#user-content-arr6)\r\n>   - \u5bb9\u91cf\r\n> [empty \u68c0\u67e5\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a](#user-content-arr7)\r\n> [size \u8fd4\u56de\u5143\u7d20\u6570](#user-content-arr8)\r\n> [max_size \u8fd4\u56de\u53ef\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u6570](#user-content-arr9)\r\n> - \u64cd\u4f5c\r\n> [fill \u4ee5\u6307\u5b9a\u503c\u586b\u5145\u5bb9\u5668](#user-content-arr10)\r\n> [swap \u4ea4\u6362\u5185\u5bb9](#user-content-arr11)\r\n> - \u975e\u6210\u5458\u51fd\u6570\r\n> [get(std::array) \u8bbf\u95ee array \u7684\u4e00\u4e2a\u5143\u7d20](#user-content-arr12)\r\n> [std::swap(std::array) \u7279\u5316 std::swap \u7b97\u6cd5](#user-content-arr13)\r\n> [std::to_array \u4ece\u5185\u5efa\u6570\u7ec4\u521b\u5efa std::array \u5bf9\u8c61](#user-content-arr14)\r\n> - \u8f85\u52a9\u7c7b\r\n> [std::tuple_size\\<std::array>](#user-content-arr15)\r\n> [std::tuple_element\\<std::array>](#user-content-arr16)\r\n***\r\n- \u6210\u5458\u8bbf\u95ee\r\n<a name='arr1'></a>\r\nat \u5e26\u8d8a\u754c\u8bbf\u95ee\u68c0\u67e5\r\n```c++\r\nstd::array<int, 6> arr{1, 2, 3, 4, 5, 6};\r\n// \u8bbe\u7f6e\u5143\u7d20\r\narr.at(1) = 10;\r\n// \u8bbf\u95ee\u5143\u7d20\r\nstd::cout << arr.at(1) << std::endl; // \u8f93\u51fa 10\r\n// \u8d8a\u754c\u5219\u629b\u51fa std::out_of_range \u7c7b\u578b\u7684\u5f02\u5e38\r\n try {\r\n    arr.at(10) = 100;\r\n  } catch (const std::out_of_range& ex) {\r\n    std::cout << ex.what() << std::endl; \r\n  }\r\n```\r\n<a name='arr2'></a>\r\noperator[] \u8bbf\u95ee\u6307\u5b9a\u5143\u7d20, \u65e0\u8fb9\u754c\u68c0\u67e5\r\n```c++\r\nstd::array<int, 6> arr{1, 2, 3, 4, 5, 6};\r\n// \u8bbe\u7f6e\u5143\u7d20\r\narr[1] = 10;\r\n// \u8bbf\u95ee\u5143\u7d20\r\nstd::cout << arr[1] << std::endl; // \u8f93\u51fa 10\r\n```\r\n\r\n<a name='arr3'></a>\r\nfront \u8bbf\u95ee\u7b2c\u4e00\u4e2a\u5143\u7d20\r\n```c++\r\nstd::array<int, 6> arr{1, 2, 3, 4, 5, 6};\r\n// \u8bbf\u95ee\u7b2c\u4e00\u4e2a\u5143\u7d20\r\nstd::cout << arr.front() << std::endl; // \u8f93\u51fa 1\r\n```\r\n\r\n<a name='arr4'></a>\r\nback \u8bbf\u95ee\u6700\u540e\u4e00\u4e2a\u5143\u7d20\r\n```c++\r\nstd::array<int, 6> arr{1, 2, 3, 4, 5, 6};\r\n// \u8bbf\u95ee\u6700\u540e\u4e00\u4e2a\u5143\u7d20\r\nstd::cout << arr.back() << std::endl; // \u8f93\u51fa 6\r\n```\r\n\r\n<a name='arr5'></a>\r\ndata \u76f4\u63a5\u8bbf\u95ee\u5e95\u5c42\u8fde\u7eed\u5b58\u50a8\r\n```c++\r\nstd::array<int, 5> arr{1, 2, 3, 4, 5};\r\n// \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5e95\u5c42\u8fde\u7eed\u5b58\u50a8\u7684\u6307\u9488\r\n// \u4f7f\u5f97\u8303\u56f4[data(), data() + size()]\u59cb\u7ec8\u4e3a\u6709\u6548\u8303\u56f4\r\n  int* p = arr.data();\r\n  for (int i = 0; i < arr.size(); i++)\r\n  {\r\n    std::cout << *(p + i) << ' ';\r\n  }\r\n  std::cout << std::endl;\r\n```\r\n- \u8fed\u4ee3\u5668\r\n<a name='arr6'></a>\r\nbegin \u6307\u5411\u8d77\u59cb\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668 \r\nend \u6307\u5411\u672b\u5143\u7d20\u540e\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\r\nrbegin \u6307\u5411\u672b\u5143\u7d20\u7684\u8fed\u4ee3\u5668\r\nrend \u6307\u5411\u5934\u5143\u7d20\u524d\u4e00\u4e2a\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\r\n> cbegin cend crbegin crend \u4e3a\u5e38\u91cf\u8fed\u4ee3\u5668\r\n```c++\r\n  std::array<int, 5> arr{1, 2, 3, 4, 5};\r\n  // \u6b63\u5411\u8fed\u4ee3\u5668\r\n  for (auto it = arr.begin(); it != arr.end(); it++)\r\n  {\r\n    std::cout << *it << ' ';\r\n    // 1 2 3 4 5 \r\n  }\r\n  std::cout << std::endl;\r\n  // \u53cd\u5411\u8fed\u4ee3\u5668\r\n  for (auto it = arr.rend() - 1; it != arr.rbegin() - 1; it--)\r\n  {\r\n    std::cout << *it << ' ';\r\n    // 1 2 3 4 5 \r\n  }\r\n  std::cout << std::endl;\r\n```\r\n- \u5bb9\u91cf\r\n<a name='arr7'></a>\r\nempty \u68c0\u67e5\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a\r\n```c++\r\n  std::array<int, 5> arr{1, 2, 3, 4, 5};\r\n  \u82e5\u5bb9\u5668\u4e3a\u7a7a\u5219\u4e3a true\uff0c\u5426\u5219\u4e3a false\r\n  std::cout << std::boolalpha << 'arr.empty() : ' << arr.empty() << std::endl;\r\n  // arr.empty() : false\r\n```\r\n<a name='arr8'></a>\r\nsize \u8fd4\u56de\u5143\u7d20\u6570\r\n```c++\r\n  std::array<int, 5> arr{1, 2, 3, 4, 5};\r\n  std::cout << 'arr.size() : ' << arr.size() << std::endl;\r\n  // arr.size() : 5\r\n```\r\n<a name='arr9'></a>\r\nmax_size \u8fd4\u56de\u53ef\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u6570\r\n```c++\r\n  std::array<int, 5> arr{1, 2, 3, 4, 5};\r\n  // \u56e0\u4e3a\u6bcf\u4e2a std::array<T, N> \u90fd\u662f\u56fa\u5b9a\u5927\u5c0f\u5bb9\u5668\uff0c\u6545 max_size \u8fd4\u56de\u7684\u503c\u7b49\u4e8e N\uff08\u4ea6\u4e3a size() \u6240\u8fd4\u56de\u7684\u503c\uff09\u3002", "top": 0, "createdAt": 1730376697, "style": "", "script": "<script src='https://code.buxiantang.top/assets/articletoc.js'></script>", "head": "", "ogImage": "https://avatars.githubusercontent.com/u/110390930?u=e650bc80688d9b64f5c5dd69d6cf9e822186493e&v=4", "createdDate": "2024-10-31", "dateLabelColor": "#bc4c00"}}, "singeListJson": {}, "labelColorDict": {"bug": "#d73a4a", "C++": "#006B75", "Data_Structure": "#22D504", "Gmeek": "#FBCA04", "Markdown": "#1d76db", "\u6587\u6863": "#0075ca"}, "displayTitle": "Nobody_Cares", "faviconUrl": "https://avatars.githubusercontent.com/u/110390930?u=e650bc80688d9b64f5c5dd69d6cf9e822186493e&v=4", "ogImage": "https://avatars.githubusercontent.com/u/110390930?u=e650bc80688d9b64f5c5dd69d6cf9e822186493e&v=4", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "homeUrl": "https://H-TXSL.github.io/Nobody_Cares.github.io", "prevUrl": "disabled", "nextUrl": "disabled"}